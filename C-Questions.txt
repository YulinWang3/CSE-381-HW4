1) We do not detach the enzyme threads because if we do they will terminate after they are ran. Yes, the program will still function if we detach the sleeper thread.

2) The program uses sched_yield to allow the other threads to run. If they are not used, the program still works and the swap count is not identicle.

3) In order for a thread to be added to the total number of swaps, it needs to be run to completion. When we cancel threads, they are not run to completion and are thus not added to the swap count.

4) The thread enters a deadlock. 

5) The program creates a thread and passes it the sleeper function which calls the syscall sleep() on a specified amount of time that you pass to the function which in this case is five.If this thread ever completes before the other threads complete, the program will exit.

6) PTHREAD_CANCEL_ASYNCHRONOUS is used so that we can cancel a thread at any time.

7) The bug was that new memory was not being allocated for info inside of loop durring each iteration, rather, it was only allocated once. 

